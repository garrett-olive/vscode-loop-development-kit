import { whisper, window } from '@oliveai/ldk';

{{ @if (it.isTypeScript) }}
interface Props {
  activeWindow: window.WindowInfo;
}
{{ /if }}
export default class WindowWhisper {
  whisper{{it.isTypeScript ? ': whisper.Whisper' : ''}};

  label = 'Active Window Changed';

  props{{it.isTypeScript ? ': Props' : ''}} = {
    activeWindow: null,
  };

  constructor(activeWindow{{it.isTypeScript ? ': window.WindowInfo' : ''}}) {
    this.props.activeWindow = activeWindow;
  }

  createComponents() {
    const name{{it.isTypeScript ? ': whisper.ListPair' : ''}} = {
      type: whisper.WhisperComponentType.ListPair,
      copyable: true,
      label: 'Window Name',
      value: this.props.activeWindow.path,
      style: whisper.Urgency.None,
    };
    const pid{{it.isTypeScript ? ': whisper.ListPair' : ''}} = {
      type: whisper.WhisperComponentType.ListPair,
      copyable: true,
      label: 'Process Id',
      value: this.props.activeWindow.pid.toString(),
      style: whisper.Urgency.None,
    };
    return [name, pid];
  }

  show() {
    whisper
      .create({
        components: this.createComponents(),
        label: this.label,
        onClose: WindowWhisper.onClose,
      })
      .then((newWhisper) => {
        this.whisper = newWhisper;
      });
  }

  close() {
    this.whisper.close(WindowWhisper.onClose);
  }

  static onClose(err{{it.isTypeScript ? '?: Error' : ''}}) {
    if (err) {
      console.error('There was an error closing Window whisper', err);
    }
    console.log('Window whisper closed');
  }
}
