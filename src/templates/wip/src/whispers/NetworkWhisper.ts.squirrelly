import { whisper } from '@oliveai/ldk';
import { stripIndent } from 'common-tags';

{{ @if (it.isTypeScript) }}
type Recall = {
  [key: string]: string;
};
interface Props {
  recalls: Recall[];
}
{{ /if }}
export default class NetworkWhisper {
  whisper{{it.isTypeScript ? ': whisper.Whisper' : ''}};

  label = 'Example for Network Aptitude (FDA Recalls)';

  props{{it.isTypeScript ? ': Props' : ''}} = {
    recalls: [],
  };

  constructor(recalls{{it.isTypeScript ? ': Recall[]' : ''}}) {
    this.props.recalls = recalls;
  }

  createComponents() {
    const components = [];
    this.props.recalls.forEach((recall) => {
      components.push({
        type: whisper.WhisperComponentType.Link,
        text: `${recall.recalling_firm} (${recall.recall_initiation_date})`,
        onClick: () => {
          const markdown = stripIndent`
          # Recalling Firm
          ${recall.recalling_firm}
          # Recall Number
          ${recall.recall_number}
          # Product Description
          ${recall.product_description}
          # Reason for Recall
          ${recall.reason_for_recall}
          `;

          whisper.create({
            label: `Recall for ${recall.recalling_firm}`,
            components: [
              {
                type: whisper.WhisperComponentType.Markdown,
                body: markdown,
              },
            ],
          });
        },
      });
    });

    return components;
  }

  show() {
    whisper
      .create({
        components: this.createComponents(),
        label: this.label,
        onClose: NetworkWhisper.onClose,
      })
      .then((newWhisper) => {
        this.whisper = newWhisper;
      });
  }

  close() {
    this.whisper.close(NetworkWhisper.onClose);
  }

  static onClose(err{{it.isTypeScript ? '?: Error' : ''}}) {
    if (err) {
      console.error('There was an error closing Network whisper', err);
    }
    console.log('Network whisper closed');
  }
}
